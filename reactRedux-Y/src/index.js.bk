import React from "react"
import {render} from "react-dom"
import {hello, goodbye} from "./lib"

// render(
//     <div>
//         {hello}
//         {goodbye}
//     </div>,
//     document.getElementById("react-container")
// )

import {createStore, combineReducers, applyMiddleware} from "redux";
import {createLogger} from "redux-logger";

const mathReducer = (state = {
    result: 1,
    lastValues: []
}, action) => {
    switch (action.type){
        case "ADD" :
            state = {
                ...state,
                result : state.result + action.payload,
                lastValues: [...state.lastValues, action.payload]
            }
            break;
        case "SUBTRACT" :
            state = {
                ...state,
                result : state.result - action.payload,
                lastValues: [...state.lastValues, action.payload]
            }
            break;
    }
    return state;
};

const userReducer = (state = {
    name: "Max",
    age: 27
}, action) => {
    switch (action.type){
        case "SET_NAME" :
            state = {
                ...state,
                name: action.payload
            }
            break;
        case "SET_AGE" :
            state = {
                ...state,
                age: action.payload
            }
            break;
    }
    return state;
};

// this arrow function is explained in part 6
const myLooger = (store) => (next) => (action) => {
    console.log("Logged Action: ", action);
    // executing next is important because its provided by redux package
    // if not called next, then our action is not travelling any further
    // its not reaching the reducer, its cancelled or failing
    next(action);
}

// here es6 is automatically doing
// mathReducer : mathReducer
// userReducer : userReducer
// empty javascript is overwritten by default state provided
const store = createStore(combineReducers({mathReducer, userReducer}), {}, applyMiddleware(myLooger, createLogger()));

store.subscribe(() => {
    console.log("Store Updated!", store.getState());
});

store.dispatch({
    type: "ADD",
    payload: 100
});

store.dispatch({
    type: "ADD",
    payload: 22
});

store.dispatch({
    type: "SUBTRACT",
    payload: 80
});

store.dispatch({
    type: "SET_AGE",
    payload: 30
});

// store.dispatch({
//     type: "SUBTRACT",
//     payload: 80
// });
